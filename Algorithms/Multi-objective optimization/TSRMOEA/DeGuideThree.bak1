function Population = DeGuideThree(Problem, rRelate, flag, W, Z, eta)


%------------------------------- Copyright --------------------------------
% Copyright (c) 2023 BIMK Group. You are free to use the PlatEMO for
% research purposes. All publications which use this platform or any code
% in the platform should acknowledge the use of "PlatEMO" and reference "Ye
% Tian, Ran Cheng, Xingyi Zhang, and Yaochu Jin, PlatEMO: A MATLAB platform
% for evolutionary multi-objective optimization [educational forum], IEEE
% Computational Intelligence Magazine, 2017, 12(4): 73-87".
%--------------------------------------------------------------------------

% PBI计算时加入扰动目标方差

    %分配鲁棒解到空权重向量
    % rRelateG = Spread(rRelate,flag,1);
    rRelateG = Spread(rRelate,flag,0);

    disp(rRelateG.objs);
    disp(rRelateG.vnos);
    disp("rRelateG3+++++");

    %% 引导进化
    % 第三类关联解共同进化，没有引导种群
    guidePop = Problem.Evaluation(rRelate.decs);
    
    R = RobustEta(Problem,guidePop);
    R   = mean(R,2);  
    % R(R < eta) = 0;
    % R(R >= eta) = R(R >= eta) - eta;
    R = repmat(R, 1, 2); 
    % disp(num2str(size(R,1)));
    % disp(num2str(size(R,2)));
    % disp("------------------------");
    objs = guidePop.objs.*R + guidePop.objs;
  
    len   = size(rRelateG,2);
    wr = find(flag == 1);
    WG = W(wr,:);
    T = ceil(len);
    B = pdist2(WG,WG);
    [~,B] = sort(B,2);
    B = B(:,1:T);

    guideFE = 100;
    while guideFE > 0
        guideFE = guideFE - 1;
        for i = 1 : len
            P = B(i,randperm(size(B,2)));
            Offspring = OperatorGAhalf(Problem,guidePop(P(1:2)));
            Z = min(Z,Offspring.obj);
            R = RobustEta(Problem,Offspring);
            R   = mean(R,2);  
            % R(R < eta) = 0;
            % R(R >= eta) = R(R >= eta) - eta;
            R = repmat(R, 1, 2); 
            offobj = Offspring.obj.*R + Offspring.obj;

            % g_old = max(abs(guidePop(P).objs-repmat(Z,T,1)).*WG(P,:),[],2);
            % g_new = max(repmat(abs(Offspring.obj-Z),T,1).*WG(P,:),[],2);
            % Zmax  = max(guidePop.objs,[],1);
            % g_old = max(abs(guidePop(P).objs-repmat(Z,T,1))./repmat(Zmax-Z,T,1).*WG(P,:),[],2);
            % g_new = max(repmat(abs(Offspring.obj-Z)./(Zmax-Z),T,1).*WG(P,:),[],2);

            % normW   = sqrt(sum(WG(P,:).^2,2));
            % normP   = sqrt(sum((guidePop(P).objs-repmat(Z,T,1)).^2,2));
            % normO   = sqrt(sum((Offspring.obj-Z).^2,2));
            % CosineP = sum((guidePop(P).objs-repmat(Z,T,1)).*WG(P,:),2)./normW./normP;
            % CosineO = sum(repmat(Offspring.obj-Z,T,1).*WG(P,:),2)./normW./normO;
            % g_old   = normP.*CosineP + 5*normP.*sqrt(1-CosineP.^2);
            % g_new   = normO.*CosineO + 5*normO.*sqrt(1-CosineO.^2);

            normW   = sqrt(sum(WG(P,:).^2,2));
            normP   = sqrt(sum((objs(P,:)-repmat(Z,T,1)).^2,2));
            normO   = sqrt(sum((offobj-Z).^2,2));
            CosineP = sum((objs(P,:)-repmat(Z,T,1)).*WG(P,:),2)./normW./normP;
            CosineO = sum(repmat(offobj-Z,T,1).*WG(P,:),2)./normW./normO;
            g_old   = normP.*CosineP + 5*normP.*sqrt(1-CosineP.^2);
            g_new   = normO.*CosineO + 5*normO.*sqrt(1-CosineO.^2);

            % g_old = max(abs(objs(P,:)-repmat(Z,T,1)).*WG(P,:),[],2);
            % g_new = max(repmat(abs(offobj-Z),T,1).*WG(P,:),[],2);
            % Zmax  = max(objs,[],1);
            % g_old = max(abs(objs(P,:)-repmat(Z,T,1))./repmat(Zmax-Z,T,1).*WG(P,:),[],2);
            % g_new = max(repmat(abs(offobj-Z)./(Zmax-Z),T,1).*WG(P,:),[],2);

            index = P(g_old>=g_new);
            guidePop(index) = Offspring;
            objs(index,:) = repmat(offobj, length(index), 1);
            % if size(index) > 0
            %     disp(["swap3"]);
            % end
        end
    end

    Population = guidePop;

end